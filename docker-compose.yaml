version: '3'
x-airflow-common:
    &airflow-common
    build: .
    environment:
        &airflow-common-env
        AIRFLOW__CORE__EXECUTOR: LocalExecutor
        AIRFLOW__CORE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
        AIRFLOW__CORE__FERNET_KEY: ''
        AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
        AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
        AIRFLOW__SCHEDULER__MIN_FILE_PROCESS_INTERVAL: 10
        ARTIFACT_STORAGE: /artifacts
    volumes:
        - ./airflow_run/dags:/opt/airflow/dags
        - ./airflow_run/logs:/opt/airflow/logs
        - ./airflow_run/plugins:/opt/airflow/plugins
        - ./.git:/opt/airflow/dags/.git
        - ./.dvc:/opt/airflow/dags/.dvc
        - ./model:/opt/airflow/dags/model
        - ./data:/opt/airflow/dags/data
        - ./pipeline.py:/opt/airflow/dags/pipeline.py
        - ./task.py:/opt/airflow/dags/task.py
    user:
        "${AIRFLOW_UID:-0}:${AIRFLOW_GID:-0}"
    depends_on:
        postgres:
            condition: service_healthy

services:
    postgres:
        image: postgres:13
        environment:
            POSTGRES_USER: airflow
            POSTGRES_PASSWORD: airflow
            POSTGRES_DB: airflow
        volumes:
            - postgres-db-volume:/var/lib/postgresql/data
        ports:
            - 5432:5432
        healthcheck:
            test: ["CMD", "pg_isready", "-U", "airflow"]
            interval: 5s
            retries: 5
        restart: always

    airflow-webserver:
        <<: *airflow-common
        command: webserver
        ports:
            - 8080:8080
        healthcheck:
            test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
            interval: 10s
            timeout: 10s
            retries: 5
        restart: always

    airflow-scheduler:
        <<: *airflow-common
        command: scheduler
        restart: always

    airflow-init:
        <<: *airflow-common
        command: version
        environment:
            <<: *airflow-common-env
            _AIRFLOW_DB_UPGRADE: 'true'
            _AIRFLOW_WWW_USER_CREATE: 'true'
            _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
            _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}

volumes:
    postgres-db-volume: